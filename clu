#!/usr/bin/perl -s

# config.pl should include:
#$config::dataset =
#  (
#   'library_keyword1' => 'data/library_datafile1',
#   'library_keyword2' => 'data/library_datafile2',
#  );
#$config::default_set = 'library_keyword1';
#$config::nick = 'nick_string';
#$config::name = 'name_string';
#$config::server = 'server_address';
#$config::port = 0000;
#$config::pw = 'password_string';
#$config::ssl = 0;
#@config::ch = ('channel_name1', 'channel_name2');
#$config::msg_length = 400;
#1;

# ---

use strict;
use vars qw($channel $mynick $irc $conn %data @channels @datakeys %cmds);
use Text::Wrap qw(fill $columns);
use JSON;
use Data::Dumper;
use POE;
use POE::Component::IRC;
use POE::Component::IRC::Plugin::AutoJoin;
use POE::Component::IRC::Plugin::BotAddressed;

require "config.pl";
$columns = $config::msg_length;
local $Data::Dumper::Terse = 1;

@channels = $ARGV[0] ? ("#$ARGV[0]") : @config::ch;
$mynick = $ARGV[1] ? $ARGV[1] : $config::nick;

while ( my ($key, $value) = each(%config::dataset) ) {
    &init_data($key, $value);
}

my $irc = POE::Component::IRC->spawn(
    nick   => $mynick,
    server => $config::server,
    Port => $config::port,
    Ircname => $config::name,
    Username => $mynick,
    Password => $config::pw,
    UseSSL => $config::ssl,
    msg_length => $config::msg_length+50,
);

POE::Session->create(
    package_states => [
        main => [ qw(_default _start irc_001 shoot_em irc_public irc_bot_addressed irc_connected irc_disconnect irc_join irc_nick irc_msg) ]
    ],
    heap => { irc => $irc },
);

$poe_kernel->run();

sub _start {
    my $heap = $_[HEAP];
    my $irc = $heap->{irc};
    $irc->plugin_add( 'BotAddressed', POE::Component::IRC::Plugin::BotAddressed->new() );
    $irc->plugin_add( 'AutoJoin', POE::Component::IRC::Plugin::AutoJoin->new(Channels => \@channels) );
    $irc->yield(register => 'all');
    $irc->yield(connect => { });
}

sub irc_001 {
    my $sender = $_[SENDER];
    my $irc = $sender->get_heap();
    print "Connected to ", $irc->server_name(), "\n";

    print "Attempting to join: " . join(' ', @channels, "\n");
    $irc->yield( join => $_ ) for @channels;
    return;
}

sub shoot_em {
    my ($who, $where) = @_;
    $irc->yield(ctcp => $where, "ACTION shoots $who *pew-pew*");
    return;
}

sub irc_public {
    return;
}

sub irc_msg {
    my $nick = ( split /!/, $_[ARG0] )[0];
    &get_response($nick, $nick, $_[ARG2]);
}

sub irc_bot_addressed {
    my $nick = ( split /!/, $_[ARG0] )[0];
    my $channel = $_[ARG1]->[0];
    if($_[ARG2] =~ m/^shoot\s+(.*)/){
        &shoot_em($1, $channel);
        return;
    }
    &get_response($nick, $channel, $_[ARG2]);
}

sub get_response {
    my($nick, $route, $what) = @_;
    my $msg = "$nick: ";
    # filtering the command requests here, trying to consolidate msg and bot_addressed
    if ($what =~ m/^help/i){
        $msg .= &get_help;
        $irc->yield( privmsg => $route => "$msg" );
    } elsif ($what =~ m/^_add/){ # add an entry
        # clu _add cmgd <term>Your term here. <def>Your definition here. <url>http://your_url_here.com
        $what =~ s/^_add\s+//;
        if ($what =~ m/^(\w*)\s+(.*)/){
            my ($libname, $argstring) = ($1, $2);
            if (exists $data{ $libname }){
                if(!$data{ $libname }->{data}->{allow_edit}){
                    $irc->yield( privmsg => $route => "The $libname dataset cannot be edited." );
                    return;
                }
                if($argstring =~ m/<term>(.*)<def>(.*)<url>(.*)/){
                    my ($term, $def, $url) = ($1, $2, $3);
                    $term =~ s/^\s+|\s+$//g;
                    $def =~ s/^\s+|\s+$//g;
                    $url =~ s/^\s+|\s+$//g;
                    for my $entry (@{$data{ $libname }->{data}->{entries}}){
                        if($term eq $entry->{term}){
                            $irc->yield( privmsg => $route => "Entry $term already exists." );
                            return;
                        }
                    }
                    $msg .= "Adding $term -- $def [$url]";
                    $irc->yield( privmsg => $route => $msg );
                    push(@{$data{ $libname }->{data}->{entries}}, {
                        term => $term,
                        def => $def,
                        url => $url,                        
                    });
                    my $jsonOut = to_json($data{ $libname }, {utf8 => 1, pretty => 1});
                    &write_data($config::dataset{ $libname }, $jsonOut);
                    return;
                } else {
                    $irc->yield( privmsg => $route => "Incomplete _add request." );
                    return;
                }
            }
        } else {
            $msg .= &get_help;
            $irc->yield( privmsg => $route => "$msg" );
            return;
        }
    } elsif ($what =~ m/^(\w+)\s?(\w+)?/){
        $msg .= &get_entries($1, $2);
        if($msg =~ m/\n/){
            my @msgLines = split('\n', $msg);
            my $numEntries = @msgLines;
            my $count = $numEntries > $config::max_results ? $config::max_results : $numEntries;
            for(my $i = 0; $i < $count; $i++){
                $irc->yield( privmsg => $route => "$msgLines[$i]" );
            }
        } else {
            my @result = split(/\n/, fill('', '', $msg));
            for my $line (@result) {
                $irc->yield( privmsg => $route => "$line" );
                #sleep 1;
            }
        }
    }
    return;
}

sub get_entries {
    my ($lib, $keyword) = @_;
    my ($result);
    my (@term_array);
    #if ((!exists $data{ $lib }) && (defined $lib) && ($lib ne '') && (exists $data{ $config::default_set })){
    if ((defined $lib) && ($lib ne '')){
        if ((!exists $data{ $lib }) && (exists $data{ $config::default_set })){
            $keyword = $lib;
            $lib = $config::default_set;
        }
    }
    if (exists $data{ $lib }){
        if ((defined $keyword) && ($keyword ne '') && (defined $lib) && ($lib ne '')){
            if ($keyword eq '_showall'){
                for my $entry (@{$data{ $lib }->{data}->{entries}}){
                    $result .= "$entry->{term}, ";
                }
            } else {
                for my $entry (@{$data{ $lib }->{data}->{entries}}){
                    if ($entry->{term} =~ m/$keyword/i){
                        $result .= "$entry->{term} -- $entry->{def}";
                        $result .=" [$entry->{url}]" if $entry->{url} ne '';
                    }
                }
            }
            $result = "I've got nothing for $lib $keyword." if (!$result);
        } elsif ((defined $lib) && ($lib ne '')) {
                my $randomNode = @{$data{ $lib }->{data}->{entries}}[rand @{$data{ $lib }->{data}->{entries}}];
                $result .= "$randomNode->{term} -- $randomNode->{def}";
                $result .= " [$randomNode->{url}]" if $randomNode->{url} ne '';
                $result = "I've got nothing for $lib." if (!$result); # we should never see this
        }
    } else {
        $result = "I've got nothing for $lib.";
    }
    return $result;
}

sub init_data {
    my ($myDatakey, $myDatavalue) = @_;
    open(FILE,"<$myDatavalue") || warn "Can't open $myDatavalue: $!";
    my $jsontext = do { local $/; <FILE>; };
    close(FILE);
    $data{ $myDatakey } = decode_json($jsontext);
}

sub write_data {
    my ($myLibFile, $myJSONString) = @_;
    open(FILE,">$myLibFile") || warn "Can't open $myLibFile: $!";
    print FILE $myJSONString;
    close(FILE);
}


# We registered for all events, this will produce some debug info.
sub _default {
    my ($event, $args) = @_[ARG0 .. $#_];
    my @output = ("$event: ");

    for my $arg (@$args){
        if(ref $arg eq 'ARRAY'){
            push(@output, '[' . join(', ', @$arg ) . ']');
        } else {
            push(@output, "'$arg'");
        }
    }
    print join(' ', @output, "\n");
    return 0;
}

sub irc_connected {
    #print "Connected to $_[ARG0]\n";
    #print "Attempting to join: " . join(' ', @channels, "\n");
}

sub irc_disconnect {
    print "Disconnected from $_[ARG0]\n";
}

sub irc_join {
    my $nick = ( split /!/, $_[ARG0] )[0];
    printf "*** %s has joined channel %s\n", $nick, $_[ARG1];
}

sub irc_nick {
    my $nick = ( split /!/, $_[ARG0] )[0];
    print "$nick is now $_[ARG1]\n";
}

sub get_help{
    my $helpmsg = sprintf("Usage: $mynick <%s> <optional keyword>", join('|', keys(%config::dataset)));
    return $helpmsg;
}